<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Style to use for TextInputLayout in the theme. -->
    <attr name="textInputStyle" format="reference" />

    <declare-styleable name="TextInputLayout">
        <!-- Whether the layout is enabled -->
        <attr name="android:enabled" />
        <!-- The hint to display in the floating label. -->
        <attr name="android:hint" />
        <!-- The text color for the hint when the text field is not activated (such
             as for the resting and disabled states). -->
        <attr name="android:textColorHint" />
        <!-- Makes the text field be at least this dimension wide if its width is
             set to wrap_content. -->
        <attr name="android:minWidth" />
        <!-- Makes the text field be at most this dimension wide if its width is set
             to wrap_content.  -->
        <attr name="android:maxWidth" />

        <!-- Whether the layout's floating label functionality is enabled. -->
        <attr name="hintEnabled" format="boolean" />
        <!-- Whether to animate hint state changes. -->
        <attr name="hintAnimationEnabled" format="boolean" />
        <!-- TextAppearance of the hint in the collapsed floating label. -->
        <attr name="hintTextAppearance" format="reference" />
        <!-- Text color of the hint in the collapsed floating label.
             If set, this takes precedence over hintTextAppearance. -->
        <attr name="hintTextColor" format="color" />
        <!-- Whether the hint should occupy the input area when the text field is
             unpopulated and not focused. -->
        <attr name="expandedHintEnabled" format="boolean" />

        <!-- The text to display as helper text underneath the text input area. -->
        <attr name="helperText" format="string" />
        <!-- Whether the layout's helper text functionality is enabled. -->
        <attr name="helperTextEnabled" format="boolean" />
        <!-- TextAppearance of the helper text displayed underneath the text input area. -->
        <attr name="helperTextTextAppearance" format="reference" />
        <!-- Text color of the helper text displayed underneath the text input area.
             If set, this takes precedence over helperTextTextAppearance. -->
        <attr name="helperTextTextColor" format="color" />

        <!-- Whether the layout is laid out as if an error will be displayed. -->
        <attr name="errorEnabled" format="boolean" />
        <!-- TextAppearance of any error message displayed. -->
        <attr name="errorTextAppearance" format="reference" />
        <!-- Text color for any error message displayed.
             If set, this takes precedence over errorTextAppearance. -->
        <attr name="errorTextColor" format="color" />
        <!-- Text to set as the content description for the error view.
             Should be set when the error message has special characters that a
             screen reader is not able to announce properly. -->
        <attr name="errorContentDescription" format="string" />
        <!-- End icon to be shown when an error is displayed. -->
        <attr name="errorIconDrawable" format="reference" />
        <!-- Tint color to use for the error icon. -->
        <attr name="errorIconTint" format="reference" />
        <!-- Blending mode used to apply the error icon tint. -->
        <attr name="errorIconTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>

        <!-- Whether the layout is laid out as if the character counter will be displayed. -->
        <attr name="counterEnabled" format="boolean" />
        <!-- The max length to display in the character counter. -->
        <attr name="counterMaxLength" format="integer" />
        <!-- TextAppearance of the character counter. -->
        <attr name="counterTextAppearance" format="reference" />
        <!-- Text color of the character counter.
             If set, this takes precedence over counterTextAppearance. -->
        <attr name="counterTextColor" format="reference" />
        <!-- TextAppearance of the character counter when the text is longer than the max. -->
        <attr name="counterOverflowTextAppearance" format="reference" />
        <!-- Text color of the character counter when the text is longer than the max.
             If set, this takes precedence over counterOverflowTextAppearance. -->
        <attr name="counterOverflowTextColor" format="reference" />

        <!-- The text to display as placeholder text in the text input area. -->
        <attr name="placeholderText" format="string" />
        <!-- TextAppearance of the placeholder text displayed in the text input area. -->
        <attr name="placeholderTextAppearance" format="reference" />
        <!-- Text color of the placeholder text displayed in the text input area.
             If set, this takes precedence over placeholderTextAppearance. -->
        <attr name="placeholderTextColor" format="color" />

        <!-- The text to display as prefix text in the text input area. -->
        <attr name="prefixText" format="string" />
        <!-- TextAppearance of the prefix text displayed in the text input area. -->
        <attr name="prefixTextAppearance" format="reference" />
        <!-- Text color of the prefix text displayed in the text input area.
             If set, this takes precedence over prefixTextAppearance. -->
        <attr name="prefixTextColor" format="color" />
        <!-- The text to display as suffix text in the text input area. -->
        <attr name="suffixText" format="string" />
        <!-- TextAppearance of the suffix text displayed in the text input area. -->
        <attr name="suffixTextAppearance" format="reference" />
        <!-- Text color of the suffix text displayed in the text input area.
             If set, this takes precedence over suffixTextAppearance. -->
        <attr name="suffixTextColor" format="color" />

        <!-- Drawable to use for the start icon. -->
        <attr name="startIconDrawable" format="reference" />
        <!-- Text to set as the content description for the start icon. -->
        <attr name="startIconContentDescription" format="string" />
        <!-- Whether the start icon is checkable. -->
        <attr name="startIconCheckable" format="boolean" />
        <!-- Tint color to use for the start icon. -->
        <attr name="startIconTint" format="color" />
        <!-- Blending mode used to apply the background tint. -->
        <attr name="startIconTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>

        <!-- Whether the text input area should be drawn as a filled box, an outline box, or not as a box.-->
        <attr name="boxBackgroundMode">
            <!-- Specifies that there should be no box set on the text input area. -->
            <enum name="none" value="0" />
            <!-- Filled box mode for the text input box. -->
            <enum name="filled" value="1" />
            <!-- Outline box mode for the text input box. -->
            <enum name="outline" value="2" />
        </attr>
        <!-- Value to use for the EditText's collapsed top padding in box mode. -->
        <attr name="boxCollapsedPaddingTop" format="dimension" />
        <!-- The value to use for the box's top start corner radius when in box mode. -->
        <attr name="boxCornerRadiusTopStart" format="dimension" />
        <!-- The value to use for the box's top end corner radius when in box mode. -->
        <attr name="boxCornerRadiusTopEnd" format="dimension" />
        <!-- The value to use for the box's bottom start corner radius when in box mode. -->
        <attr name="boxCornerRadiusBottomStart" format="dimension" />
        <!-- The value to use for the box's bottom end corner radius when in box mode. -->
        <attr name="boxCornerRadiusBottomEnd" format="dimension" />
        <!-- The color to use for the box's stroke when in outline box mode. -->
        <attr name="boxStrokeColor" format="color" />
        <!-- The color to use for the box's stroke in outline box mode when an error
             is being displayed. If not set, it defaults to errorTextColor if on
             error state, or to counterOverflowTextColor if on overflow state. -->
        <attr name="boxStrokeErrorColor" format="color" />
        <!-- The color to use for the box's background color when in filled box mode.
             If a non-stateful color resource is specified, default colors will be used for the hover
             and disabled states.  -->
        <attr name="boxBackgroundColor" format="color" />
        <!-- The value to use for the box's stroke when in outline box mode, or for the underline stroke
             in filled mode. -->
        <attr name="boxStrokeWidth" format="dimension" />
        <!-- The value to use for the focused box's stroke when in outline box mode, or for the focused
             underline stroke in filled mode.. -->
        <attr name="boxStrokeWidthFocused" format="dimension" />

        <!-- Shape appearance style reference for TextInputLayout. Attribute declaration is in the Shape
            package. -->
        <attr name="shapeAppearance" />
        <!-- Shape appearance overlay style reference for TextInputLayout. To be used to augment
             attributes declared in the shapeAppearance. Attribute declaration is in the Shape
             package. -->
        <attr name="shapeAppearanceOverlay" />

        <!-- Whether the view will display a toggle when the EditText has a password.
             Deprecated. The view's end icon should be specified via endIconMode instead. -->
        <attr name="passwordToggleEnabled" format="boolean" />
        <!-- Drawable to use as the password input visibility toggle icon.
             Deprecated. Use endIconDrawable instead. -->
        <attr name="passwordToggleDrawable" format="reference" />
        <!-- Text to set as the content description for the password input visibility toggle.
             Deprecated. Use endIconContentDescription instead. -->
        <attr name="passwordToggleContentDescription" format="string" />
        <!-- Icon to use for the password input visibility toggle
             Deprecated. Use endIconTint instead. -->
        <attr name="passwordToggleTint" format="color" />
        <!-- Blending mode used to apply the background tint.
             Deprecated. Use endIconTintMode instead. -->
        <attr name="passwordToggleTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>
    </declare-styleable>

    <declare-styleable name="TextInputEditText">
        <!-- Whether the TextInputEditText should use the TextInputLayout's focused
             rectangle instead of its own. -->
        <attr name="textInputLayoutFocusedRectEnabled" format="boolean" />
    </declare-styleable>

    <!-- A tonal variation of the primary color. -->
    <attr name="colorPrimaryVariant" format="color" />
    <!-- The secondary branding color for the app, usually a bright complement to the primary
         branding color. -->
    <attr name="colorSecondary" format="color" />
    <!-- A tonal variation of the secondary color. -->
    <attr name="colorSecondaryVariant" format="color" />
    <!-- The color of surfaces such as cards, sheets, menus. -->
    <attr name="colorSurface" format="color" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         primary. -->
    <attr name="colorOnPrimary" format="color" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         secondary. -->
    <attr name="colorOnSecondary" format="color" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         background. -->
    <attr name="colorOnBackground" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         error. -->
    <attr name="colorOnError" format="color" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         surface. -->
    <attr name="colorOnSurface" format="color" />
    <!-- A color that corresponds to colorPrimary in light themes and colorSurface in dark
         themes. -->
    <attr name="colorPrimarySurface" format="color" />
    <!-- A color that passes accessibility guidelines for text/iconography when drawn on top of
         colorPrimarySurface. -->
    <attr name="colorOnPrimarySurface" format="color" />

    <!-- The scrim background that appears below modals and expanded navigation menus.
         The background can either be a color or a bitmap drawable with tileMode set to repeat. -->
    <attr name="scrimBackground" format="color|reference" />

    <!-- Internal flag used to denote that a theme is a Theme.MaterialComponents theme or a
         Theme.MaterialComponents.Bridge theme. -->
    <attr name="isMaterialTheme" format="boolean" />

    <!-- When set to true, the material selection controls will tint themselves according to
         Material Theme colors. When set to false, Material Theme colors will
         be ignored. This value should be set to false when using custom drawables
         that should not be tinted. This value is ignored if a buttonTint is set.
         Set this attribute on your styles for each selection control.-->
    <attr name="useMaterialThemeColors" format="boolean" />

    <declare-styleable name="ThemeEnforcement">
        <!-- Internal flag used to denote that a style uses new attributes defined by
             Theme.MaterialComponents, and that the component should check via ThemeEnforcement that the
             client's app theme inherits from Theme.MaterialComponents.

             Not all usages of new attributes are problematic in the context of a legacy app theme. You
             should only use this flag if a particular usage is known to cause a visual glitch or crash.
             For example, tinting a vector drawable with a non-existent theme attribute is known to
             crash on pre-21 devices. -->
        <attr name="enforceMaterialTheme" format="boolean" />
        <!-- Internal flag used to denote that a style requires that the textAppearance attribute is
             specified and evaluates to a valid text appearance. -->
        <attr name="enforceTextAppearance" format="boolean" />
        <!-- Attribute used to check that a component has a TextAppearance specified on it. -->
        <attr name="android:textAppearance" />
    </declare-styleable>

    <declare-styleable name="ForegroundLinearLayout">
        <attr name="android:foreground" />
        <attr name="android:foregroundGravity" />
        <!-- Do not expose publicly, used by ForegroundLinearLayout but never set by any style.  -->
        <attr name="foregroundInsidePadding" format="boolean" />
    </declare-styleable>

    <declare-styleable name="ScrimInsetsFrameLayout">
        <attr name="insetForeground" format="color|reference" />
    </declare-styleable>

    <!-- Do not expose publicly, FlowLayout (private class) that is the parent for ChipGroup (public), which has its own public spacing attributes.  -->
    <declare-styleable name="FlowLayout">
        <!-- Horizontal spacing between two items being laid out. -->
        <attr name="itemSpacing" format="dimension" />
        <!-- Vertical Spacing between two lines of items being laid out. -->
        <attr name="lineSpacing" format="dimension" />
    </declare-styleable>

    <declare-styleable name="Insets">
        <!-- Just adding the parameters that we need for now. We can add others if we need them, but
             ideally we'll be able to use https://github.com/chrisbanes/insetter once it's ready. -->
        <attr name="paddingBottomSystemWindowInsets" format="boolean" />
        <attr name="paddingLeftSystemWindowInsets" format="boolean" />
        <attr name="paddingRightSystemWindowInsets" format="boolean" />
        <attr name="paddingTopSystemWindowInsets" format="boolean" />
    </declare-styleable>

    <attr name="elevationOverlayEnabled" format="boolean" />
    <!-- The color of the elevation overlay layer, which will be used with an alpha
         percentage based on elevation. -->
    <attr name="elevationOverlayColor" format="color" />
    <!-- The color of the elevation overlay accent layer, which will be placed
         on top of the composited background and overlay color. -->
    <attr name="elevationOverlayAccentColor" format="color" />

    <!-- Type definitions for common attributes used across component packages. -->
    <attr name="checkedIcon" format="reference" />
    <attr name="checkedIconTint" format="color" />
    <attr name="minTouchTargetSize" format="dimension" />
    <attr name="selectionRequired" format="boolean" />
    <attr name="singleSelection" format="boolean" />
    <attr name="strokeColor" format="color" />
    <attr name="strokeWidth" format="dimension" />
    <attr name="ensureMinTouchTargetSize" format="boolean" />
    <attr name="trackColor" format="color" />
    <attr name="navigationIconTint" format="color" />

    <!-- Navigation and Pickers -->
    <attr name="headerLayout" format="reference" />
    <attr name="itemTextColor" format="color" />
    <attr name="itemShapeAppearance" format="reference" />
    <attr name="itemShapeAppearanceOverlay" format="reference" />

    <declare-styleable name="MaterialTextAppearance" parent="TextAppearance">
        <attr name="android:lineHeight" />
        <attr name="lineHeight" format="dimension" />
        <attr name="android:letterSpacing" />
    </declare-styleable>


    <declare-styleable name="MaterialShape">
        <!-- Shape appearance style reference to be used to construct a ShapeAppearanceModel. -->
        <attr name="shapeAppearance" format="reference" />
        <!-- Shape appearance overlay style reference to be used to modify the shapeAppearance. -->
        <attr name="shapeAppearanceOverlay" format="reference" />
    </declare-styleable>

    <declare-styleable name="ShapeAppearance">
        <!-- Corner size to be used in the ShapeAppearance. All corners default to this value -->
        <attr name="cornerSize" format="dimension|fraction" />
        <!-- Top left corner size to be used in the ShapeAppearance. -->
        <attr name="cornerSizeTopLeft" format="dimension|fraction" />
        <!-- Top right corner size to be used in the ShapeAppearance. -->
        <attr name="cornerSizeTopRight" format="dimension|fraction" />
        <!-- Bottom right corner size to be used in the ShapeAppearance. -->
        <attr name="cornerSizeBottomRight" format="dimension|fraction" />
        <!-- Bottom left corner size to be used in the ShapeAppearance. -->
        <attr name="cornerSizeBottomLeft" format="dimension|fraction" />

        <!-- Corner family to be used in the ShapeAppearance. All corners default to this value -->
        <attr name="cornerFamily" format="enum">
            <enum name="rounded" value="0" />
            <enum name="cut" value="1" />
        </attr>
        <!-- Top left corner family to be used in the ShapeAppearance. -->
        <attr name="cornerFamilyTopLeft" format="enum">
            <enum name="rounded" value="0" />
            <enum name="cut" value="1" />
        </attr>
        <!-- Top right corner family to be used in the ShapeAppearance. -->
        <attr name="cornerFamilyTopRight" format="enum">
            <enum name="rounded" value="0" />
            <enum name="cut" value="1" />
        </attr>
        <!-- Bottom right corner family to be used in the ShapeAppearance. -->
        <attr name="cornerFamilyBottomRight" format="enum">
            <enum name="rounded" value="0" />
            <enum name="cut" value="1" />
        </attr>
        <!-- Bottom left corner family to be used in the ShapeAppearance. -->
        <attr name="cornerFamilyBottomLeft" format="enum">
            <enum name="rounded" value="0" />
            <enum name="cut" value="1" />
        </attr>
    </declare-styleable>

    <!-- Shape appearance style reference for small components. -->
    <attr name="shapeAppearanceSmallComponent" format="reference" />
    <!-- Shape appearance style reference for medium components. -->
    <attr name="shapeAppearanceMediumComponent" format="reference" />
    <!-- Shape appearance style reference for large components. -->
    <attr name="shapeAppearanceLargeComponent" format="reference" />

    <!-- Text appearance for the Headline 1 style. -->
    <attr name="textAppearanceHeadline1" format="reference" />
    <!-- Text appearance for the Headline 2 style. -->
    <attr name="textAppearanceHeadline2" format="reference" />
    <!-- Text appearance for the Headline 3 style. -->
    <attr name="textAppearanceHeadline3" format="reference" />
    <!-- Text appearance for the Headline 4 style. -->
    <attr name="textAppearanceHeadline4" format="reference" />
    <!-- Text appearance for the Headline 5 style. -->
    <attr name="textAppearanceHeadline5" format="reference" />
    <!-- Text appearance for the Headline 6 style. -->
    <attr name="textAppearanceHeadline6" format="reference" />
    <!-- Text appearance for the Subtitle 1 style. -->
    <attr name="textAppearanceSubtitle1" format="reference" />
    <!-- Text appearance for the Subtitle 2 style. -->
    <attr name="textAppearanceSubtitle2" format="reference" />
    <!-- Text appearance for the Body 1 style. -->
    <attr name="textAppearanceBody1" format="reference" />
    <!-- Text appearance for the Body 2 style. -->
    <attr name="textAppearanceBody2" format="reference" />
    <!-- Text appearance for the Caption style. -->
    <attr name="textAppearanceCaption" format="reference" />
    <!-- Text appearance for the Button style. -->
    <attr name="textAppearanceButton" format="reference" />
    <!-- Text appearance for the Overline style. -->
    <attr name="textAppearanceOverline" format="reference" />

    <attr name="materialThemeOverlay" format="reference" />

</resources>
